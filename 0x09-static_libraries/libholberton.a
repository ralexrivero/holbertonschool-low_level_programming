!<arch>
0-isupper.c/    0           0     0     644     197       `
#include "holberton.h"

/**
 *_isupper - Entry point
 *@c:charater
 *Return: if is lower or upper return 1 else 0
 */
int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
return (1);
else
return (0);
}

0-memset.c/     0           0     0     644     443       `
#include "holberton.h"

/**
 * _memset - Fills memory with a constant byte
 * @s: buffer array
 * @b: constant byte
 * @n: number of bytes of memory area to fill
 * Description: Fill the first `n` bytes of the memory area pointed to by `s`
 * with the constant byte `b`.
 * Return: Pointer to memory area `s`
 */

char *_memset(char *s, char b, unsigned int n)
{
	int i;

	i = 0;
	while (n > 0)
	{
		s[i] = b;
		i++;
		n--;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     371       `
#include "holberton.h"

/**
 * _strcat - concatenate two strings
 * @dest: char string to concatenate to
 * @src: char string
 * Return: pointer to resulting string `dest`
 */

char *_strcat(char *dest, char *src)
{
	int i, c;

	for (i = 0; dest[i] != '\0'; i++)
		;

	for (c = 0; src[c] != '\0'; c++)
	{
		dest[i] = src[c];
		i++;
	}

	dest[i] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     410       `
#include "holberton.h"

/**
 * _atoi - Converts a string to an integer.
 * @s: The string to be converted.
 *
 * Return: The integer value of the converted string.
 */
int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {
		if (*s == '-')
			sign *= -1;

		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');

		else if (num > 0)
			break;

	} while (*s++);

	return (num * sign);
}
1-isdigit.c/    0           0     0     644     209       `
#include "holberton.h"

/**
 * _isdigit - checks for characters that are digits
 * @c: character
 *
 * Return: 0 or 1
 */


int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     493       `
#include "holberton.h"

/**
 * _memcpy - Copies memory area
 * Description: This function copies @n bytes from memory
 * area @src to memory area @dest
 * @dest: Pointer that store new memory area values
 * @src: Pointer taht cointas memory area values
 * @n: Bytes of memory area to copy
 * Return: The @dest with @src memory area values
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(dest + i) = *(src + i);
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     398       `
lines (24 sloc) 372 Bytes
#include "holberton.h"
/**
 * _strncat - function is similar to the _strcat
 * @dest: char pointer
 * @src: char pointer
 * @n: int
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	int j = 0;

	while (dest[i] != '\0')
	{
		i++;
	}

	while (src[j] != '\0' && j < n)
	{
		dest[i + j] = src[j];
		j++;
	}
	dest[i + j] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     384       `
#include "holberton.h"

/**
 * _strchr - Locates a character in a string.
 * @s: The string to be searched.
 * @c: The character to be located.
 *
 * Return: If c is found - a pointer to the first occurence.
 *         If c is not found - NULL.
 */
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (s + i);
	}

	return ('\0');
}
2-strlen.c/     0           0     0     644     215       `
#include "holberton.h"

/**
 * _strlen - return the length of the string
 * @s: char type pointer
 * Return: length of string
 */

int _strlen(char *s)
{
	int c;

	for (c = 0; s[c] != '\0'; c++)
		;

	return (c);
}

2-strncpy.c/    0           0     0     644     457       `
#include "holberton.h"

/**
 * _strncpy - Copy a string
 * Description: This function copies a string from 0 to @n bytes
 * @dest: String where gonna copy
 * @src: String to copy into @dest
 * @n: Number of bytes to copy
 * Return: @n bytes of @src
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	while (i < n && *(dest + i) != '\0')
	{
		if (*src != '\0')
			*(dest + i) = *src++;
		else
			*(dest + i) = '\0';
		i++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     234       `
#include "holberton.h"
/**
 * _islower - Return 1 if letter is lowercase, 0 if not.
 * @c: char type letter
 * Return: 1 if lowercase, 0 if not lowercase
 */
int _islower(int c)
{
if (c > 96 && c < 123)
return (1);
else
return (0);
}
3-puts.c/       0           0     0     644     251       `
#include "holberton.h"

/**
 * _puts - print a string to stdout
 * @str: char array string type
 * Description: Can only use _putchar
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     403       `
#include "holberton.h"

/**
 * _strcmp - Compare strings
 * Description: This function compare two strings
 * @s1: First string to compare
 * @s2: Second string to compare
 * Return: @n bytes of @src
 */
int _strcmp(char *s1, char *s2)
{
	while (*s1 != '\0' && *s2 != '\0')
	{
		if (*s1 > *s2)
			return (*s1 - *s2);
		else if (*s2 > *s1)
			return ((*s2 - *s1) * -1);
		s1++;
		s2++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     475       `
#include "holberton.h"

/**
 * _strspn - search string for set of bytes
 * @s: char string array
 * @accept: char array to check bytes with
 * Return: Number of bytes in the intial segmet
 */

unsigned int _strspn(char *s, char *accept)
{
	int a;
	int b;
	int c;

	a = 0;
	c = 0;

	while (s[a] != '\0')
	{
		b = 0;
		while (accept[b] != '\0')
		{
			if (s[a] == accept[b])
			{
				c++;
				break;
			}
			b++;
		}
		if (accept[b] == '\0')
			break;
		a++;
	}
	return (c);
}

4-isalpha.c/    0           0     0     644     303       `
#include "holberton.h"

/**
 * _isalpha - Checks if a character is alphabetic.
 * @c: The character to be checked.
 *
 * Return: 1 if character is letter, lowercase or uppercase, 0 otherwise.
 */
int _isalpha(int c)
{
if ((c >= 'a' && c <= 'z') ||
(c >= 'A' && c <= 'Z'))
return (1);
else
return (0);
}

4-strpbrk.c/    0           0     0     644     495       `
#include "holberton.h"

/**
 * _strpbrk - Search a string for any of a set of bytes.
 * @s: string
 * @accept: string to match
 * Return: Pointer to the byte in `s` that matches one of the bytes in `accept`
 * or NULL if no such byte is found.
 */

char *_strpbrk(char *s, char *accept)
{
	int a;
	int b;
	char *p;

	a = 0;
	while (s[a] != '\0')
	{
		b = 0;
		while (accept[b] != '\0')
		{
			if (accept[b] == s[a])
			{
				p = &s[a];
				return (p);
			}
			b++;
		}
		a++;
	}

	return (0);
}

5-strstr.c/     0           0     0     644     767       `
#include "holberton.h"

/**
 * _strstr - locates substring
 * Description: Function locates a substring @needle
 * in @haystack
 * @haystack: Pointer contains a string
 * @needle: Pointer contai the substring in @haystack
 * Return: A pointer to the beginning of the located substring
 * in @accept, or NULL if the substring is not found
 */
char *_strstr(char *haystack, char *needle)
{
	int a = 0;
	int b = 0;
	int c;
	int d = 0;

	if (*needle == '\0')
	{
		return (haystack);
	}
	while (*(haystack + a) != '\0')
	{
		b = 0;
		c = a;
		while (*(needle + b) != '\0')
		{
			if (*(needle + b) == *(haystack + c))
			{
				d = 1;
			}
			else
			{
				d = 0;
				break;
			}
			b++;
			c++;
		}
		if (d == 1)
		{
			return (haystack + a);
		}
		a++;
	}
	return (0);
}

6-abs.c/        0           0     0     644     220       `
#include "holberton.h"
/**
 * _abs - compute the absolute value of an integer
 * @n: int type number
 * Return: absolute value of @n
 */
int _abs(int n)
{
	if (n < 0)
	{
		return (n * -1);
	}
	else
	{
		return (n);
	}
}
9-strcpy.c/     0           0     0     644     387       `
#include "holberton.h"

/**
 * *_strcpy - See description
 * @dest: char type string
 * @src: char type string
 * Description: Copy the string pointed to by pointer `src` to
 * the buffer pointed to by `dest`
 * Return: Pointer to `dest`
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';

	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

